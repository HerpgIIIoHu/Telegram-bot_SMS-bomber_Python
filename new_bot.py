from email import message
import logging, asyncio
import config
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import DataBase
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import datetime, random
import bomb
from threading import Thread
from pyqiwip2p import QiwiP2P
from aiogram.utils.callback_data import CallbackData
API_TOKEN = config.API_TOKEN
logging.basicConfig(level=logging.INFO)
PayQiwi = QiwiP2P(auth_key=config.QIWI_TOKEN)
db = DataBase(config.DB)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

#–í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
now = datetime.datetime.now()#–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
nows = ("{}.{}.{}  {}:{}".format(now.day, now.month, now.year, now.hour, now.minute))
date_for_db = ("{}-{}-{}  {}:{}".format(now.day, now.month, now.year, now.hour, now.minute+10))
date_for_bomb = ("{}-{}-{}-{}.{}".format(now.day, now.month, now.year, now.hour, now.minute-10))
update_date = ("{}-{}-{}-{}.{}".format(now.day, now.month, now.year, now.hour, now.minute))
####################################################################################async 

class Message_users(StatesGroup):
    summa_popolneniya = State()
    number_spam = State()


async def isNumber(_str):
    try:
        int(_str)
        return True
    except Exception as e:
        return False

async def num(phone):
    if ((phone[0:2] == "+7" and len(phone[1:]) == 11) or (phone[0:4] == '+380' and len(phone[4:]) == 12)):
        return True
    else:
        return False
    ############################################################
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not db.user_exist(message.from_user.id):
        db.add_user(message.from_user.id)
        await message.answer(f'<strong>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è —É –Ω–∞—Å –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ</strong>\n–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–µ–Ω –≤ –Ω–∞—à—É –±–∞–∑—É!\n–ù–∞–∂–º–∏ /help —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é', parse_mode="html")
    else:
        await message.answer("<strong>–ù–∞–∂–º–∏—Ç–µ</strong> <b>/help\n</b><i>–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é</i>", parse_mode="html")
        
@dp.message_handler(content_types=['contact'])
async def contact(message):
    if message.contact != None:
        db.set_userPhone(message.chat.id, message.contact.phone_number)

@dp.message_handler(content_types=["text"])
async def handle_text(message):
    
    if message.text.strip() == "/help":
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        
        Info_user = types.KeyboardButton("üë§–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        what_know_how = types.KeyboardButton("‚ÑπÔ∏è–ß—Ç–æ —è —É–º–µ—é?")
        Spam = types.KeyboardButton("üí£–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ–º–±–µ—Ä")
        markup.row(Info_user, Spam)
        markup.row(what_know_how)
        
        await message.answer('<b>–ù–∞–∂–º–∏: </b>', reply_markup=markup, parse_mode='html')
    
    elif message.text.strip() == 'üë§–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' :
        
        markup2 = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Åüíµ", callback_data="top_up")
        markup2.add(item1)
        answer = f"<b>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>\n<i>–í—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n\n</i><strong>–¢–µ–±—è –∑–æ–≤—É—Ç:</strong> {message.from_user.first_name}\n<strong>–¢–≤–æ–π ID:</strong> {message.from_user.id}\n<strong>–í–∞—à –ª–æ–≥–∏–Ω:</strong> @{message.from_user.username}\n<strong>–ë–∞–ª–∞–Ω—Å:</strong> {db.user_money(message.from_user.id)} —Ä—É–±."
        await message.answer(answer, parse_mode='html', reply_markup= markup2)
        
    
    elif message.text.strip() == "‚ÑπÔ∏è–ß—Ç–æ —è —É–º–µ—é?":
        answer = "<strong>–ü–æ–∫–∞ —á—Ç–æ —è —Å–∞–º –Ω–µ –∑–Ω–∞—é(\n–ù–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ</strong>"
        await message.answer(answer, parse_mode='html')
    elif message.text.strip() == "üí£–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ–º–±–µ—Ä":
        markup_s = types.InlineKeyboardMarkup(row_width=3)
        markup_s.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –±–æ–º–±–∏—Ç—å", callback_data="bomb"))
        await message.answer("<i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã:\n–ù–∞—á–∏–Ω–∞—è —Å </i><b>+7</b> <i>–∏–ª–∏</i> <b>+380</b><i>!!!</i>", parse_mode='html',reply_markup=markup_s)  
        
@dp.callback_query_handler(text = "top_up")
async def callback(call: types.CallbackQuery):
    # p = open("img.jpg", 'rb')#–î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ# –ü–æ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –±–æ—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ caption
    await bot.answer_callback_query(call.id, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç 10 —Ä—É–±–ª–µ–π!", show_alert=True)#–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await Message_users.summa_popolneniya.set()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—èüí∞ü§ë:")
        
@dp.callback_query_handler(text = "top_ups")
async def callback(call: types.CallbackQuery):
    # p = open("img.jpg", 'rb')#–î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ# –ü–æ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –±–æ—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ caption
    await bot.answer_callback_query(call.id, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç 10 —Ä—É–±–ª–µ–π!", show_alert=True)#–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await Message_users.summa_popolneniya.set()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—èüí∞ü§ë:")
        
@dp.callback_query_handler(text_contains = "check_")
async def callback(call: types.CallbackQuery):
    bill = call.data[6:]
    info = db.get_check(bill_id=bill)
    if info != False:
        try:
            if (PayQiwi.check(bill_id=bill).status) == "PAID":
                user_money = db.user_money(call.from_user.id)
                money = int(info[2])
                db.set_money(call.from_user.id, user_money+money)
                db.set_date(call.from_user.id, "–û–ø–ª–∞—á–µ–Ω")
                date_check = "–û–ø–ª–∞—á–µ–Ω"
                db.add_checks(call.from_user.id, money, nows, date_check)
                await call.message.answer("‚úÖ–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω)üëå")
                
            else:
                await call.message.answer("‚ùå–°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω‚ùå")
        except Exception as e:
            print(e)

    else:
        await call.answer("ü§∑‚Äç‚ôÇÔ∏è–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ωü§∑‚Äç‚ôÇÔ∏è")
            
@dp.callback_query_handler(text = "bomb")
async def callback(call: types.CallbackQuery):
    await Message_users.number_spam.set()
    await call.message.answer("–í–≤–æ–¥–∏ –Ω–æ–º–µ—Äüì≤:")
        

@dp.message_handler(state=Message_users.number_spam)
async def process_message(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        data = message
    
    await state.finish()
    await doomb_number(data)


@dp.message_handler(state=Message_users.summa_popolneniya)
async def process_message(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        data = message
    await popolnenie_balansa(data)
    await state.finish()
    
async def doomb_number(message):
    await spam(message)
    
            
async def popolnenie_balansa(message):
    await bot_mess(message)
    

async def bot_mess(message):
    if await isNumber(message.text):
        message_money = int(message.text)#–û–±—Ä–∞–∑–∞–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞–ª–∏ –∏–¥—Ç–∏ —Å 0 —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –∑–∞–±–∏–ª–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π
        if message_money >= 10:
            date_check = "–ù–µ –æ–ø–ª–∞—á–µ–Ω"
            comment = str(message.from_user.id) + "_" + str(random.randint(1000, 6000))
            bill = PayQiwi.bill(amount=message_money, lifetime = 10, comment = comment)
            db.add_check(message.from_user.id, message_money, bill.bill_id, nows, date_check)
            markup = types.InlineKeyboardMarkup(row_width=3)
            items = types.InlineKeyboardButton(text="‚è≥–û–ø–ª–∞—Ç–∏—Ç—å‚è≥", url=bill.pay_url)
            items2 = types.InlineKeyboardButton(text="üßÆ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—ÉüßÆ", callback_data="check_"+bill.bill_id, )
            markup.add(items)
            markup.add(items2)
            await message.answer(f"üí≤–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É {message_money} —Ä—É–±–ª–µ–πüí≤:", reply_markup=markup)   
        else:
            await message.answer("‚ö†Ô∏è–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç 10 —Ä—É–±–ª–µ–π‚ö†Ô∏è\n<i>–ù–∞–∂–º–∏—Ç–µ</i> <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> <i>–µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ</i>", parse_mode="html")
    
    else:
        await message.answer("–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!\n<i>–ù–∞–∂–º–∏—Ç–µ</i> <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> <i>–µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ</i>", parse_mode="html")

    
      
async def spam(message):
    try:
        if await num(message.text) != False:
            phone = message.text
            
            user_money = db.user_money(message.from_user.id)
            await message.answer("–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ‚úÖ")
            if user_money >= 5:
                db.add_data_zapuska(update_date, message.chat.id)
                await message.answer("–ë–æ–º–±–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç)")
                db.set_money(message.from_user.id, user_money-5)
                
                Thread(target=bomb.bomb, args=(phone,)).start()
            else:
                mar = types.InlineKeyboardMarkup()
                mar.add(types.InlineKeyboardButton("üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Åüí≥", callback_data="top_ups"))
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤<b>\n–û–¥–∏–Ω –∑–∞–ø—É—Å–∫ —Å—Ç–æ–∏—Ç 5 —Ä—É–±–ª–µ–π</>", reply_markup=mar, parse_mode="html")
            
        else:
            await message.answer("üö´–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æüö´\n<i>–ù–∞–∂–º–∏—Ç–µ</i> <b>–ù–∞—á–∞—Ç—å –±–æ–º–±–∏—Ç—å</b> <i>–µ—â–µ —Ä–∞–∑,—á—Ç–æ–±—ã –ø—Ä–µ–π—Ç–∏ –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞</i>", parse_mode="html")
    
    except Exception as e:
        print(e)
        
        
async def close_spam(phone):
    await message.answer(f"–°–ø–∞–º –Ω–æ–º–µ—Ä–∞ <strong>{phone}</strong> –∑–∞–∫–æ–Ω—á–µ–Ω", parse_mode="html")
    
 
    
if __name__ == '__main__':
    
    executor.start_polling(dp)